
```{r}
setwd("C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/scripts")
Output = ("C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output")

library(readxl)
library(tidyverse)
library(reshape2)


#reading in file
proteomics_df <- read.csv("C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/data/011023_Processed_Proteomics_Data.csv")

```

```{r}
head(proteomics_df)

```

```{r}
proteomics_df = proteomics_df %>%
    # just want a column that specifies the treatment and exposure separately
  separate(Subject_ID, c("Responder_Status", "ID"), sep = "_") %>%   
  separate(Sample_ID, c("Pre_Post", NA), sep = "_") %>% 
  separate(Protein_Name, c("Protein_Name", NA), sep = "_")
  

head(proteomics_df)

```


T-tests comparing mean imputed_norm_intensity of each protein from 'pre' and post' exposures
```{r pre vs post}
proteins <- unique(proteomics_df$Protein_Accession)
#proteins list will hold unique protein accession names from Protein_Accession column of the proteomics_df

ttest_pre.post <- data.frame()
#create an empty dataframe for the loop function to place values into

for (i in 1:length(proteins)) {
  #head of for loop  defines a collection of objects such as the elements of a vector or a list
  
  #we are specifying within the head of the for-loop that we want to run through a vector      containing elements from the first element [1], through the entire length of the proteins vector
    
  filtered <- proteomics_df %>%
  filter(Protein_Accession == proteins[i])
#make a new data frame that looks within the proteomics_df and the filter function will retain all rows that satisfy the conditions when the Protein_Accession variable is the same as the variable from the proteins list.
  #The i in proteins[i] is specify that the loop filters through this filter step through the entirety of the proteins list
  
  pre <- filtered %>%
    filter(Pre_Post == "Pre") %>%
    rename("Intensity_Pre" = "Imputed_Norm_Intensity")
  
  pre$Log2_Intensity_Pre <- log2(pre$Intensity_Pre)
  
#Now we will make another data frame, we will filter for rows from the 'filtered' df when the Pre_Post variable is "Pre"
  #In this step, we also want to specify that the intensity values from this new 'Pre' filtered data frame are 'pre'... so we will rename the Intensity column in this df to 'Intesity_Pre'
  
  post <- filtered %>%
    filter(Pre_Post == "Post") %>%
    rename("Intensity_Post" = "Imputed_Norm_Intensity") %>%
    select(ID, Intensity_Post)
  
    post$Log2_Intensity_Post <- log2(post$Intensity_Post)
  
  pre_and_post <- pre %>%
    right_join(post, by = "ID")
  
  head(pre_and_post)
  
#Now that the intensity has been filtered and renamed for either pre or post values, we will join these data frames together using right_join() To include all the rows of data frame 'pre' and only those from 'post' that match by "ID", specify y=TRUE.
    
#making a df for columns related to information about the proteins
   protein_info <- filtered %>% 
     select(Protein_Accession, Protein_Name, Protein_Descriptions)
     
   protein_info <- protein_info[!duplicated(protein_info), ]
   
#I only need one row of description for each protein, so I deleted the duplicate rows
  
   head(protein_info)

  ttest_res <- t.test(pre_and_post$Intensity_Pre, pre_and_post$Intensity_Post, paired = TRUE)
#from our new pre_and_post data frame, we can finally do t-tests because the pre and post values are stratified.
  #The t.test function generates a long and informative list, we can subset for specific information from this list by setting it as a ttes_res object and selecting for values like p.value

  pval <- ttest_res$p.value
  #pval object is a list that selects for the p.values generated from the ttes_res object
  
  Protein_Accession <- proteins[i] 
   
  res <- data.frame(pval, Protein_Accession)
  
  #This new object 'res' will be a data frame that contains the list object 'pval' where the Protein_Accession for this data frame will be from the entire characterized vector 'proteins'
  
  res2 <- merge(res, protein_info, by = "Protein_Accession") 
#Let's join our res data frame with the protein_info data frame     
  
  head(res2)
  
  ttest_pre.post <- rbind(ttest_pre.post, res2)
#Lastly, we will merge the res2 data frame with our empty data frame "ttest_pre.post" that we made before starting the loop
  
}

#ttest_pre.post$p.adj <- p.adjust(ttest_pre.post$pval, method = "BH")

#ttest_pre.post <-  ttest_pre.post[,c(2, 5, 1, 3, 4)]

write.csv(ttest_pre.post,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/ttest_pre.post_2.09.2023.csv")

```


Let's filter ttest_pre.post for p-values <0.05 
```{r pre vs post, significant results}
ttest_pre.post_sig <- ttest_pre.post %>% 
  filter(pval < 0.05)

head(ttest_pre.post_sig)

write.csv(ttest_pre.post_sig,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/ttest_pre.post_sig.csv")

```


Let's find the mean difference between Post - Pre and then run t-tests based on R and NR subjects
```{r post-pre, R vs NR}

proteins <- unique(proteomics_df$Protein_Accession)
#proteins list will hold unique protein accession names from Protein_Accession column of the proteomics_df

ttest_R.NR <- data.frame()
#create an empty dataframe for the loop function to place values into

#I'm making new dfs for future use with full post - pre data then further stratified by R and NR
post_minus_pre <- data.frame()

post_minus_pre_R <- data.frame()

post_minus_pre_NR <- data.frame()


for (i in 1:length(proteins)) {

    
  filtered <- proteomics_df %>%
  filter(Protein_Accession == proteins[i])
#make a new data frame that looks within the proteomics_df and the filter function will retain all rows that satisfy the conditions when the Protein_Accession variable is the same as the variable from the proteins list.

  pre <- filtered %>%
    filter(Pre_Post == "Pre") %>%
    rename("Intensity_Pre" = "Imputed_Norm_Intensity")
  
#Now we will make another data frame, we will filter for rows from the 'filtered' df when the Pre_Post variable is "Pre"
  #In this step, we also want to specify that the intensity values from this new 'Pre' filtered data frame are 'pre'... so we will rename the Imputed_Norm_Intensity column in this df to 'Intesity_Pre'
  
  post <- filtered %>%
    filter(Pre_Post == "Post") %>%
    rename("Intensity_Post" = "Imputed_Norm_Intensity") %>%
    select(ID, Intensity_Post)
  
  pre_and_post <- pre %>%
    right_join(post, by = "ID") 
  
  pre_and_post$post_minus_pre <- (pre_and_post$Intensity_Post - pre_and_post$Intensity_Pre)
  
  #i'm going to fill the first post - pre df
  post_minus_pre <- rbind(post_minus_pre, pre_and_post)

  head(pre_and_post)
  
  #This new column will give us the difference between post and intensity values. We want to do t-tests based on the mean difference of pre and post values when stratified by R or NRs in the later steps.
  
  #R.NR_filtered <- pre_and_post %>% 
 # select("Protein_Accession", "Responder_Status", "ID", "post_minus_pre")

  R <- pre_and_post %>% 
  filter(Responder_Status == "R") %>% 
  rename("R_post_minus_pre" = "post_minus_pre")
  
  NR <- pre_and_post %>% 
  filter(Responder_Status == "NR") %>% 
  rename("NR_post_minus_pre" = "post_minus_pre") 

  protein_info <- filtered %>% 
     select(Protein_Accession, Protein_Name, Protein_Descriptions)
     
  protein_info <- protein_info[!duplicated(protein_info), ]
  
  head(protein_info)
  
#Now I will fill in the other dfs where I stratify post - pre by R vs NR
  post_minus_pre_R <- rbind(post_minus_pre_R, R)
  
  post_minus_pre_NR <- rbind(post_minus_pre_NR, NR)
  
  ttest_res <- t.test(R$R_post_minus_pre, NR$NR_post_minus_pre, paired = FALSE)
#We are doing t-tests on the mean differences of Post and pre vlaues when stratefied by R and NR. These t-tests will NOT be paired because subjects are either R or NR.
  
  pval <- ttest_res$p.value
  #pval object is a list that selects for the p.values generated from the ttes_res object
  
  Protein_Accession <- proteins[i]
  #Make a df merging the p-values and the Protein Accession #s
  
  res <- data.frame(pval, Protein_Accession)
#This new object 'res' will be a data frame that contains the list object 'pval' where the row.names for this data frame will be from the entire characterized vector 'proteins'
   
  res2 <- merge(res, protein_info, by = "Protein_Accession") 

  head(res2)
  
  ttest_R.NR <- rbind(ttest_R.NR, res2)
#Lastly, we will combine our res2 data frame into the empty data frame "ttest_R.NR" that we made before starting the loop 
  
}

#ttest_R.NR$p.adj <- p.adjust(ttest_R.NR$pval, method = "BH")

ttest_R.NR <-  ttest_R.NR[,c(2, 5, 1, 3, 4)]

head(post_minus_pre_R.NR)

post_minus_pre <- post_minus_pre %>% 
  select(-c("ID", "Intensity", "Number_Unique_Peptides", "Pre_Post"))

post_minus_pre_R <- post_minus_pre_R %>% 
  select(-c("ID", "Intensity", "Number_Unique_Peptides", "Pre_Post"))

post_minus_pre_NR <- post_minus_pre_NR %>% 
  select(-c("ID", "Intensity", "Number_Unique_Peptides", "Pre_Post"))

write.csv(ttest_R.NR,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/ttest_R.NR.csv")

write.csv(post_minus_pre,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/post_minus_pre_02.07_2023.csv")

write.csv(post_minus_pre_R,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/post_minus_pre_R_02.07_2023.csv")

write.csv(post_minus_pre_NR,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/post_minus_pre_NR_02.07_2023.csv")

```


Let's make some mean and sd dataframes based on the post - pre dataframes
```{r}
#I'm making new dataframes to find the means and sds of each Post - Pre exposure by the Protein_Accession

post_minus_pre_mean <- post_minus_pre %>% 
  group_by(Protein_Accession) %>% 
  summarise(Post_minus_Pre_Mean = mean(post_minus_pre),
    sd=sd(post_minus_pre))

#This df will merge with the FC_mag_mean df to provide more information about the proteins
prot_info <- post_minus_pre %>% 
  distinct(Protein_Accession,.keep_all = TRUE) %>% 
  select(-c(post_minus_pre, Responder_Status))

post.pre_long <- merge(post_minus_pre_mean, prot_info, by = "Protein_Accession") 

#Rearranging the order of the columns and ordering the rows by descending mean values
post.pre_long <- post.pre_long %>% 
  select(c("Protein_Accession", "Gene_Name", "Protein_Name", 
           "Protein_Descriptions", "Post_minus_Pre_Mean", "sd")) %>% 
  arrange(desc(Post_minus_Pre_Mean))

#I'm making new dataframes to find the means and sds of each Pre and Post exposure by the Protein_Accession

post_m_pre_R_mean <- post_minus_pre_R %>% 
  group_by(Protein_Accession) %>% 
  summarise(Post_minus_Pre_Mean = mean(R_post_minus_pre),
    sd=sd(R_post_minus_pre))

post_m_pre_NR_mean <- post_minus_pre_NR %>% 
  group_by(Protein_Accession) %>% 
  summarise(Post_minus_Pre_Mean = mean(NR_post_minus_pre),
    sd=sd(NR_post_minus_pre))

#Let's add the protein info back into the dfs and reorganize the columns
Pre.Post.R_long <- merge(post_m_pre_R_mean, prot_info, by = "Protein_Accession") 

Pre.Post.R_long <- Pre.Post.R_long %>% 
  select(c("Protein_Accession", "Gene_Name", "Protein_Name", 
           "Protein_Descriptions", "Post_minus_Pre_Mean", "sd")) %>% 
  arrange(desc(Post_minus_Pre_Mean))

Pre.Post.NR_long <- merge(post_m_pre_NR_mean, prot_info, by = "Protein_Accession") 

Pre.Post.NR_long <- Pre.Post.NR_long %>% 
  select(c("Protein_Accession", "Gene_Name", "Protein_Name", 
           "Protein_Descriptions", "Post_minus_Pre_Mean", "sd")) %>% 
  arrange(desc(Post_minus_Pre_Mean))

write.csv(post.pre_long, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/post.pre_long_02_07_2023.csv")


```


Let's add the ttest_pre.post pvals to the post.pre_long so we can sort by pval. Let's also add ttest_R.NR pvals to the Pre.Post.R_long and Pre.Post.NR_long
```{r}

Pre.Post_long <- merge(post.pre_long, ttest_pre.post, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

Pre.Post_long <- arrange(Pre.Post_long, pval)


Pre.Post.R_long <- merge(Pre.Post.R_long, ttest_R.NR, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

Pre.Post.R_long <- arrange(Pre.Post.R_long, pval)


Pre.Post.NR_long <- merge(Pre.Post.NR_long, ttest_R.NR, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

Pre.Post.NR_long <- arrange(Pre.Post.NR_long, pval)


write.csv(Pre.Post_long, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/Pre.Post_long_02_08_2023.csv")

write.csv(Pre.Post.R_long, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/Pre.Post.R_long_02_08_2023.csv")

write.csv(Pre.Post.NR_long, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/Pre.Post.NR_long_02_08_2023.csv")

```


Let's find the Fold change (Post / Pre) and run t-tests based on R and NR subjects
```{r post / pre, R vs NR}

proteins <- unique(proteomics_df$Protein_Accession)
#proteins list will hold unique protein accession names from Protein_Accession column of the proteomics_df


#Let's make empty data frames to put all  pre vs post pvals after r vs NR stratification (ttest_R.NR_FC)
ttest_R.NR_FC <- data.frame()

#Let's make empty data frames to put the actual FC magnitudes (post_div_pre) into. All fold change pvals will go into FC df, and fold change values after R vs NR stratification will go into FC_R and FC_NR.
FC <- data.frame() 

FC_R <- data.frame() 

FC_NR <- data.frame() 

for (i in 1:length(proteins)) {

    
  filtered <- proteomics_df %>%
  filter(Protein_Accession == proteins[i])
#make a new data frame that looks within the proteomics_df and the filter function will retain all rows that satisfy the conditions when the Protein_Accession variable is the same as the variable from the proteins list.

  pre <- filtered %>%
    filter(Pre_Post == "Pre") %>%
    rename("Intensity_Pre" = "Imputed_Norm_Intensity")
  
#Now we will make another data frame, we will filter for rows from the 'filtered' df when the Pre_Post variable is "Pre"
  #In this step, we also want to specify that the intensity values from this new 'Pre' filtered data frame are 'pre'... so we will rename the Imputed_Norm_Intensity column in this df to 'Intesity_Pre'
  
  post <- filtered %>%
    filter(Pre_Post == "Post") %>%
    rename("Intensity_Post" = "Imputed_Norm_Intensity") %>%
    select(ID, Intensity_Post)
  
  pre_and_post <- pre %>%
    right_join(post, by = "ID") 
  
  pre_and_post$Post_Div_Pre <- (pre_and_post$Intensity_Post / pre_and_post$Intensity_Pre)

  head(pre_and_post)
  
  #I'm merging the pre_and_post df into FC to hold all of the fold change values
  FC <- rbind(FC, pre_and_post)

  #This new column will give us the difference between post and intensity values. We want to do t-tests based on the mean difference of pre and post values when stratified by R or NRs in the later steps.
  
  R.NR_filtered <- pre_and_post %>% 
  select("Protein_Accession", "Responder_Status", "ID", "Post_Div_Pre")

  R <- R.NR_filtered %>% 
  filter(Responder_Status == "R") %>% 
  rename("R_Post_Div_Pre" = "Post_Div_Pre")
  
  NR <- R.NR_filtered %>% 
  filter(Responder_Status == "NR") %>% 
  rename("NR_Post_Div_Pre" = "Post_Div_Pre") 
  
  FC_R <- rbind(FC_R, R) 
  FC_NR <- rbind(FC_NR, NR) 
  
  #Let's make a separate df with protein information that we can use to merge with future dataframes
  protein_info <- filtered %>% 
     select(Protein_Accession, Protein_Name, Protein_Descriptions, Gene_Name)
 
  #we only need one lines of the protein info data frame so I am deleting the duplicate rows
  protein_info <- protein_info[!duplicated(protein_info), ]
  
  head(protein_info)
  
  
#Let's do the t-tests for R and NR stratified data 
  ttest_R.NR_res <- t.test(R$R_Post_Div_Pre, NR$NR_Post_Div_Pre, paired = FALSE)
#We are doing t-tests on the mean differences of Post and pre vlaues when stratefied by R and NR. These t-tests will NOT be paired because subjects are either R or NR.
  
  pval <- ttest_R.NR_res$p.value

  Protein_Accession <- proteins[i]
  #Make a df merging the p-values and the Protein Accession #s
  
  res_R.NR <- data.frame(pval, Protein_Accession)
#This new object 'res_R.NR' will be a data frame that contains the list object 'pval' where the row.names for this data frame will be from the entire characterized vector 'proteins'
   
  res_R.NR_2 <- merge(res_R.NR, protein_info, by = "Protein_Accession") 

  head(res_R.NR_2)
  
  ttest_R.NR_FC <- rbind(ttest_R.NR_FC, res_R.NR_2)

  
}

ttest_R.NR_FC <- ttest_R.NR_FC %>% 
  arrange(pval)

#Let's clean up and reorganize our dfs
FC <- FC %>% 
  select(-c("Number_Unique_Peptides", "ID", "Pre_Post", "Intensity"))

#Let's isolate the protein info from the FC df so we can add it to FC_R and FC_NR
prot_info <- FC %>% 
  distinct(Protein_Accession,.keep_all = TRUE) %>% 
  select(-c(Post_Div_Pre, Responder_Status, Intensity_Pre, Intensity_Post))

FC_R <- merge(FC_R, prot_info, by = "Protein_Accession") 

FC_NR <- merge(FC_NR, prot_info, by = "Protein_Accession") 

write.csv(ttest_R.NR_FC,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/ttest_R.NR_FC_02_08_2023.csv")

write.csv(FC,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_02.08.2023.csv")

write.csv(FC_R,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_R_02.08.2023.csv")

write.csv(FC_NR,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_NR_02.08.2023.csv")

```


Let's make some mean and sd dataframes based on the fold change post / pre dataframes
```{r}

#Let's generate mean fold changes by protein accession name
FC_mean <- FC %>% 
  group_by(Protein_Accession) %>% 
  summarise(Post_Div_Pre_Mean = mean(Post_Div_Pre),
    sd=sd(Post_Div_Pre))

#Let's add the protein info into this df 
prot_info <- FC %>% 
  distinct(Protein_Accession,.keep_all = TRUE) %>% 
  select(-c(Post_Div_Pre, Responder_Status, Intensity_Pre, Intensity_Post))

FC_mean <- merge(FC_mean, prot_info, by = "Protein_Accession") 

#Rearranging the order of the columns and ordering the rows by descending mean values
FC_mean <- FC_mean %>% 
  select(c("Protein_Accession", "Gene_Name", "Protein_Name", 
           "Protein_Descriptions", "Post_Div_Pre_Mean", "sd")) %>% 
  arrange(desc(Post_Div_Pre_Mean))

#Let's make new dfs with the means and sd of each R and NR fold changes
FC_R_mean <- FC_R %>% 
  group_by(Protein_Accession) %>% 
  summarise(R_Post_Div_Pre_Mean = mean(R_Post_Div_Pre),
    sd=sd(R_Post_Div_Pre))

FC_R_mean <- merge(FC_R_mean, prot_info, by = "Protein_Accession") 

FC_NR_mean <- FC_NR %>% 
  group_by(Protein_Accession) %>% 
  summarise(NR_Post_Div_Pre_Mean = mean(NR_Post_Div_Pre),
    sd=sd(NR_Post_Div_Pre))

FC_NR_mean <- merge(FC_NR_mean, prot_info, by = "Protein_Accession") 

```


Let's add the ttest_pre.post pvals to the FC_mean so we can sort by pval. Let's also add ttest_R.NR_FC pvals to the FC_R_mean and FC_NR_mean dfs.
```{r}

FC_mean <- merge(FC_mean, ttest_pre.post, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

FC_mean <- FC_mean %>% 
  arrange(pval)


FC_R_mean <- merge(FC_R_mean, ttest_R.NR_FC, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions", "Gene_Name"), all.x = TRUE)

FC_R_mean <- FC_R_mean %>% 
  arrange(pval)


FC_NR_mean <- merge(FC_NR_mean, ttest_R.NR_FC, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions", "Gene_Name"), all.x = TRUE)

FC_NR_mean <- FC_NR_mean %>% 
  arrange(pval)

write.csv(FC_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_mean_02_08_2023.csv")

write.csv(FC_R_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_R_mean_02_08_2023.csv")

write.csv(FC_NR_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/FC_NR_mean_02_08_2023.csv")

```


Let's find the Percent Change between Post and Pre and then run t-tests based on R and NR subjects.
Percent change = ((Post - Pre) / Post)*100
```{r percent change, R vs NR}
proteins <- unique(proteomics_df$Protein_Accession)
#proteins list will hold unique protein accession names from Protein_Accession column of the proteomics_df

#Let's make an empty df to put R vs NR ttest pvals into
ttest_R.NR_PC <- data.frame()

#create an empty dataframes to place pre vs post PC values into, and PC values after being stratified for R and NR 
PC <- data.frame()

PC_R <- data.frame()

PC_NR <- data.frame()


for (i in 1:length(proteins)) {

    
  filtered <- proteomics_df %>%
  filter(Protein_Accession == proteins[i])
#make a new data frame that looks within the proteomics_df and the filter function will retain all rows that satisfy the conditions when the Protein_Accession variable is the same as the variable from the proteins list.

  pre <- filtered %>%
    filter(Pre_Post == "Pre") %>%
    rename("Intensity_Pre" = "Imputed_Norm_Intensity")
  
#Now we will make another data frame, we will filter for rows from the 'filtered' df when the Pre_Post variable is "Pre"
  #In this step, we also want to specify that the intensity values from this new 'Pre' filtered data frame are 'pre'... so we will rename the Imputed_Norm_Intensity column in this df to 'Intesity_Pre'
  
  post <- filtered %>%
    filter(Pre_Post == "Post") %>%
    rename("Intensity_Post" = "Imputed_Norm_Intensity") %>%
    select(ID, Intensity_Post)
  
  pre_and_post <- pre %>%
    right_join(post, by = "ID") 
  
  pre_and_post$Percent_Change <- (((pre_and_post$Intensity_Post -   pre_and_post$Intensity_Pre) / pre_and_post$Intensity_Post)*100)

  head(pre_and_post)
  
  #Let's put the pre_and_post df into the PC df
  PC <- rbind(PC, pre_and_post)
  
  #This new column will give us the difference between post and intensity values. We want to do t-tests based on the mean difference of pre and post values when stratified by R or NRs in the later steps.
  
  R.NR_filtered <- pre_and_post %>% 
  select("Protein_Accession", "Responder_Status", "ID", "Percent_Change")

  R <- R.NR_filtered %>% 
  filter(Responder_Status == "R") %>% 
  rename("R_Percent_Change" = "Percent_Change")
  
  NR <- R.NR_filtered %>% 
  filter(Responder_Status == "NR") %>% 
  rename("NR_Percent_Change" = "Percent_Change") 
  
  #Let's add the stratified R and NR data into their respective dfs
  PC_R <- rbind(PC_R, R)
  
  PC_NR <- rbind(PC_NR, NR)
  
  #Let's make a df of protein information that we can add back into the ttest df later
  protein_info <- filtered %>% 
     select(Protein_Accession, Protein_Name, Protein_Descriptions)
     
  protein_info <- protein_info[!duplicated(protein_info), ]
  
  head(protein_info)
  
#we only need one lines of the protein info data frame so I am deleting the duplicate rows
  
  ttest_res <- t.test(R$R_Percent_Change, NR$NR_Percent_Change, paired = FALSE)
#We are doing t-tests on the mean differences of Post and pre vlaues when stratefied by R and NR. These t-tests will NOT be paired because subjects are either R or NR.
  
  pval <- ttest_res$p.value
  #pval object is a list that selects for the p.values generated from the ttes_res object
  
  Protein_Accession <- proteins[i]
  #Make a df merging the p-values and the Protein Accession #s
  
  res <- data.frame(pval, Protein_Accession)
#This new object 'res' will be a data frame that contains the list object 'pval' where the row.names for this data frame will be from the entire characterized vector 'proteins'
   
  res2 <- merge(res, protein_info, by = "Protein_Accession") 

  head(res2)
  
  ttest_R.NR_PC <- rbind(ttest_R.NR_PC, res2)
  
}

ttest_R.NR_PC <- ttest_R.NR_PC %>% 
  arrange(pval)

#Let's clean up and reorganize our dfs
PC <- PC %>% 
  select(-c("Number_Unique_Peptides", "ID", "Pre_Post", "Intensity"))

#Let's isolate the protein info from the FC df so we can add it to FC_R and FC_NR
prot_info <- PC %>% 
  distinct(Protein_Accession,.keep_all = TRUE) %>% 
  select(-c(Percent_Change, Responder_Status, Intensity_Pre, Intensity_Post))

PC_R <- merge(PC_R, prot_info, by = "Protein_Accession") 

PC_NR <- merge(PC_NR, prot_info, by = "Protein_Accession") 

write.csv(ttest_R.NR_PC,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/ttest_R.NR_PC_02_08_2023.csv")

write.csv(PC,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_02.08.2023.csv")

write.csv(PC_R,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_R_02.08.2023.csv")

write.csv(PC_NR,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_NR_02.08.2023.csv")

```


Let's make some mean and sd dataframes based on the percent change
```{r}

#Let's generate mean fold changes by protein accession name
PC_mean <- PC %>% 
  group_by(Protein_Accession) %>% 
  summarise(Percent_Change_Mean = mean(Percent_Change),
    sd=sd(Percent_Change))

#Let's add the protein info into this df 
prot_info <- PC %>% 
  distinct(Protein_Accession,.keep_all = TRUE) %>% 
  select(-c(Percent_Change, Responder_Status, Intensity_Pre, Intensity_Post))

PC_mean <- merge(PC_mean, prot_info, by = "Protein_Accession") 

#Rearranging the order of the columns and ordering the rows by descending mean values
PC_mean <- PC_mean %>% 
  select(c("Protein_Accession","Protein_Name", "Gene_Name", 
           "Protein_Descriptions", "Percent_Change_Mean", "sd")) %>% 
  arrange(desc(Percent_Change_Mean))

#Let's make new dfs with the means and sd of each R and NR fold change
PC_R_mean <- PC_R %>% 
  group_by(Protein_Accession) %>% 
  summarise(R_Percent_Change_Mean = mean(R_Percent_Change),
    sd=sd(R_Percent_Change))

PC_R_mean <- merge(PC_R_mean, prot_info, by = "Protein_Accession") 

PC_NR_mean <- PC_NR %>% 
  group_by(Protein_Accession) %>% 
  summarise(NR_Percent_Change_Mean = mean(NR_Percent_Change),
    sd=sd(NR_Percent_Change))

PC_NR_mean <- merge(PC_NR_mean, prot_info, by = "Protein_Accession") 

```


Let's add the ttest_pre.post pvals to the PC_mean so we can sort by pval. Let's also add ttest_R.NR_PC pvals to the PC_R_mean and PC_NR_mean
```{r}

PC_mean <- merge(PC_mean, ttest_pre.post, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

PC_mean <- PC_mean %>% 
  arrange(pval)


PC_R_mean <- merge(PC_R_mean, ttest_R.NR_PC, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

PC_R_mean <- PC_R_mean %>% 
  arrange(pval) %>% 
  select(c("Protein_Accession", "Protein_Name", "Gene_Name", "Protein_Descriptions","R_Percent_Change_Mean", "sd", "pval"))


PC_NR_mean <- merge(PC_NR_mean, ttest_R.NR_PC, by = c("Protein_Accession", "Protein_Name", "Protein_Descriptions"), all.x = TRUE)

PC_NR_mean <- PC_NR_mean %>% 
  arrange(pval)%>% 
  select(c("Protein_Accession", "Protein_Name", "Gene_Name", "Protein_Descriptions","NR_Percent_Change_Mean", "sd", "pval"))


write.csv(PC_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_mean_02_08_2023.csv")

write.csv(PC_R_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_R_mean_02_08_2023.csv")

write.csv(PC_NR_mean, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project/output/PC_NR_mean_02_08_2023.csv")

```
