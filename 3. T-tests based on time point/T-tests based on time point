
# Set up workspace
```{r message = FALSE, warning = FALSE}
# Set directory for knitr to save the html
knitr::opts_knit$set(root.dir = "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Proteomics Project")

```

# Load packages and datasets.
```{r message = FALSE, warning = FALSE}
# Load packages
library(readxl) # for reading in files
library(openxlsx) # for writing excel files
library(tidyverse) # for data organization and manipulation
library(purrr) # for summary stats

# Read in files.
proteomics_short <- read_excel("../output_FINAL/proteomics_short_08.10.2024.xlsx")
```

# T-Tests and Fold Change Calculations

This loop will generate T-tests across each protein for Pre and Post across all subjects.
```{r}
# Create a list of proteins that the loop function will assess.
proteins <- unique(proteomics_short$Protein_Name)

#create an empty dataframe for the loop function to place values into.
ttest_mean_res <- data.frame()

for (i in 1:length(proteins)) {
  
  # Isolate data only for the relevant Protein_Name in the loop.
  All_filtered <- proteomics_short %>% 
    filter(Protein_Name == proteins[i])
  
  # Make list objects that hold the mean and sd values.
  Pre_Mean <- mean(All_filtered$Pre)
  Pre_SD <- sd(All_filtered$Pre)
  
  Post_Mean <- mean(All_filtered$Post)
  Post_SD <- sd(All_filtered$Post)

  
  # Runs T-tests on Pre vs Post.
  ttest <- t.test(All_filtered$Pre, All_filtered$Post, paired = TRUE)


  # Isolate p-value from ttest_res to place in ttest_pre.post later in the chunk.
  Pval <- ttest$p.value

  # This list will be used to add the appropriate protein name to ttest_pre.post.
  Protein_Name <- proteins[i] 
  
  # Put all needed values into a df that we will bind to the empty ttest_pre.post df.
  res <- data.frame(Protein_Name, Pre_Mean, Pre_SD, Post_Mean, Post_SD, Pval)

  ttest_mean_res <- rbind(res, ttest_mean_res)
  
}

ttest_mean_res$p.adj <-  p.adjust(ttest_mean_res$Pval, "fdr")

# Save results.
write.xlsx(ttest_mean_res,"../output_FINAL/T.Tests_Means_Pre.Post_08.10.2024.xlsx")
```

## Fold changes

Fold change is defined as FC = Log2(post) - Log2(pre), or in this case FC = post - pre since our data are already log2 transformed.

I will create a df that determines the FC of each protein across each person. I will use this df in future code chunks to summarize the FCs by different metrics.
```{r}
# Create a list of proteins that the loop function will assess.
proteins <- unique(proteomics_short$Protein_Name)

# Create an empty dataframe for the loop function to place values into.
Log2_FC.df <- data.frame()
 
for (i in 1:length(proteins)) {
  
  # Isolate data only for the relavent Protein_Name in the loop.
  filtered <- proteomics_short %>% 
    filter(Protein_Name == proteins[i])
  
  # Calculate the FC  
  Log2_FC <- filtered$Post - filtered$Pre

  # This list will be used to add the appropriate protein name to ttest_pre.post.
  Protein_Name <- proteins[i] 
  
  # I will want the ID across each protein FC labeled   
  ID <- filtered %>% 
    select("ID", "Sex") %>% 
    unique()
  
  # Put all needed values into a df that we will bind to the empty ttest_pre.post df.
  res <- data.frame(ID, Protein_Name, Log2_FC)

  Log2_FC.df <- rbind(res, Log2_FC.df)
  
}  

# Save results.
write.xlsx(Log2_FC.df,"../output_FINAL/Log2_FC_08.10.2024.xlsx")
```

Generate summary statistics.
```{r}
# This df will hold the FC means and SDs across all proteins 
Log2_FC_Mean <- Log2_FC.df %>% 
  group_by(Protein_Name) %>% 
  summarise(
    Log2_FC_mean = mean(Log2_FC),
    SD = sd(Log2_FC)) %>% 
  select(c(Protein_Name, Log2_FC_mean, SD))  
  
colnames(Log2_FC_Mean)[colnames(Log2_FC_Mean) == "Log2_FC_mean"] <- "Log2_FC"
```
