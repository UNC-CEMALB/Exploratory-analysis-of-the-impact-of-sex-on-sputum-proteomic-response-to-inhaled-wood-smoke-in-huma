# Set up workspace
```{r message = FALSE, warning = FALSE}
# Set directory for knitr to save the html
knitr::opts_knit$set(root.dir = "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2")

```

# Load packages and datasets.
```{r message = FALSE, warning = FALSE}
# Load packages
library(readxl) # for reading in files
library(openxlsx) # for writing excel files
library(tidyverse) # for data organization and manipulation

# Read in files.
original_proteomics_df <- read.csv("C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2/data/011023_Processed_Proteomics_Data.csv")
demographics <- read_excel("C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2/data/SubjectInfo_091324.xlsx", sheet = "Demographic_DATA") # new and correct subject numbers
```

# Import data and perform initial cleaning steps
The raw data will be log2 transformed.
```{r}
proteomics_df = original_proteomics_df %>%
  separate(Subject_ID, c("Responder_Status", "Subject_Number"), sep = "_") %>%   
  separate(Sample_ID, c("Pre_Post", NA), sep = "_") %>% 
  separate(Protein_Name, c("Protein_Name", NA), sep = "_") %>% 
  rename("Non_Imputed_Intensity" = "Intensity") %>% 
  rename("Intensity" = "Imputed_Norm_Intensity") 

# We will only study log2 transformed data.
proteomics_df$Log2_Intensity <- log2(proteomics_df$Intensity)

#  Shorten demographics data 
demo <- demographics[,c(1:10)]

# Merge proteomics data with the demographics data.
proteomics_df <- merge(proteomics_df, demo, by = "Subject_Number")
names(proteomics_df)[names(proteomics_df) == 'Subject_Number'] <- 'ID'

head(proteomics_df)
```

Make a smaller dataframe to use for future plots.
```{r}
proteomics_short <- proteomics_df %>% 
  select(c(ID, Protein_Name, Protein_Accession, Pre_Post, Log2_Intensity, Sex)) %>% 
  pivot_wider(names_from = Pre_Post, values_from = Log2_Intensity)

# Save dataframe 
write.xlsx(proteomics_short,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2/output/proteomics_short_09.27.2024.xlsx")
```

Separate into two data frames: one for Pre intensity and another for Post intensity. 
```{r}
pre <- proteomics_df %>%
  filter(Pre_Post == "Pre") %>% 
  pivot_wider(names_from = Pre_Post, values_from = Log2_Intensity)

post <- proteomics_df %>%
  filter(Pre_Post == "Post") %>% 
  pivot_wider(names_from = Pre_Post, values_from = Log2_Intensity)

```

# Test for normality and homogeneity of variances

## Perform the Shapiro-Wilk test and F-Test

Shapiro-Wilk test: if the test is non-significant (p>.05) it tells us that the distribution of the sample is not significantly different from a normal distribution.

F-test: using var.test(), if the p-value > 0.05 significance, there is no significant difference between the two variances.
```{r}
# The 'proteins' list will hold unique protein names that we will use for the upcoming loop function.
proteins <- unique(proteomics_df$Protein_Name)

# Create an empty dataframe for the loop function to place values into.
SW.F_Res <- data.frame()

for (i in 1:length(proteins)) {
 
  # Select only protein[i] 
  Pre_Filtered <- pre %>%
    filter(Protein_Name == proteins[i])
  
  Post_Filtered <- post %>%
    filter(Protein_Name == proteins[i])
  
  # Run the Shapiro-Wilk test across the mean protien 'Delta' from Pre and Post across all subjects
  SW_Pre <- shapiro.test(Pre_Filtered$Pre)
  SW_Post <- shapiro.test(Post_Filtered$Post)

  # Run the F-test across mean Pre and Post across all subjects
  F_test <- var.test(Pre_Filtered$Pre, Post_Filtered$Post)
  
  # Isolate the p-value list from each test.
  SW_Pre_pval <- SW_Pre$p.value
  SW_Post_pval <- SW_Post$p.value
  
  F_pval <- F_test$p.value
  
  # Isolating proteins names to include in the final df.
  Protein_Name <- proteins[i] 
  
  # Merge the Protein names and p-values into a new df.
  res <- data.frame(Protein_Name, SW_Pre_pval, SW_Post_pval, F_pval)
  
  # Merge the 'res' df with the empty dataframe 'Var_Res'.
  SW.F_Res <- rbind(res, SW.F_Res)
  
}

# Make a column that indicates if each protein has normal distribution from the Pre pvals.
SW.F_Res$Pre_Normal_Dist <- 
  case_when(
    SW.F_Res$SW_Pre_pval < 0.05 ~ "No",
    SW.F_Res$SW_Pre_pval > 0.05 ~ "Yes")

# Make a column that indicates if each protein has normal distribution from the Post pvals.
SW.F_Res$Post_Normal_Dist <- 
  case_when(
    SW.F_Res$SW_Post_pval < 0.05 ~ "No",
    SW.F_Res$SW_Post_pval > 0.05 ~ "Yes")

# Make a column that indicates if each protein has significant difference between the Pre and Post variances.
SW.F_Res$Homogeneity <- 
  case_when(
    SW.F_Res$F_pval < 0.05 ~ "No",
    SW.F_Res$F_pval > 0.05 ~ "Yes")

# Save results.
write.xlsx(SW.F_Res,"C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2/output/SW_and_F.Test_Results_09.30.2024.xlsx")
```

## Assessing normality and homogeneity of variance 

Determine how many proteins have variances that are normally distributed and exhibit homogeneity of variance.
```{r}
# Number of normally distributed proteins across Pre and Post.
length(which(SW.F_Res$Pre_Normal_Dist == "Yes")) # 1479 proteins are normally distributed
length(which(SW.F_Res$Pre_Normal_Dist == "No")) # 375 proteins are not normally distributed.

length(which(SW.F_Res$Post_Normal_Dist == "Yes")) # 1376 proteins are normally distributed
length(which(SW.F_Res$Post_Normal_Dist == "No")) # 478 proteins are not normally distributed.

# Number of proteins that exhibit homogeneity of variance.
length(which(SW.F_Res$Homogeneity == "Yes")) # 1794 proteins exhibit homogeneity of variance
length(which(SW.F_Res$Homogeneity == "No")) # 60 proteins exhibit homogeneity of variance

# How many proteins answer "Yes" to each condition: 
length(which(SW.F_Res$Pre_Normal_Dist == "Yes" & SW.F_Res$Post_Normal_Dist == "Yes" & SW.F_Res$Homogeneity == "Yes")) 
# 1131 Proteins.

# How many proteins answer "no" to each condition:
length(which(SW.F_Res$Normal_Dist == "No" & SW.F_Res$Post_Normal_Dist == "No" & SW.F_Res$Homogeneity == "No")) # 0 Proteins.

# A majority of proteins exhibit normal distribution and homogeneity of variance. We will proceed with statistical testing that assumes normality.
```

## Aggregate Summary Statistics

Aggregate = All subjects included.

Create dataframes holding means and standard deviations of all subjects Pre and Post.

First, generate means and sds of each protein Pre- and Post- separately.
```{r}
# Create a list of proteins that the loop function will assess.
proteins <- unique(proteomics_df$Protein_Name)

# Create an empty dataframe for the loop function to place values into.
Prot_Means <- data.frame()

for (i in 1:length(proteins)) {
  
  Pre_Filtered <- pre %>%
    filter(Protein_Name == proteins[i])
  
  Post_Filtered <- post %>%
    filter(Protein_Name == proteins[i])
  
  # Make list objects that hold the mean and sd values.
  Pre_Mean_Intensity <- mean(Pre_Filtered$Intensity)
  Pre_SD <- sd(Pre_Filtered$Intensity)
  
  Post_Mean_Intensity <- mean(Post_Filtered$Intensity)
  Post_SD <- sd(Post_Filtered$Intensity)
  
  # Isolating proteins names to include in the final df.
  Protein_Name <- proteins[i] 
  
  # Merge the Protein names with means and sds into a new df.
  res <- data.frame(Protein_Name, Pre_Mean_Intensity, Pre_SD, Post_Mean_Intensity, Post_SD)
  
  # Merge the res df with the empty df.
  Prot_Means <- rbind(res, Prot_Means)
  
}

head(Prot_Means)

# Save results.
write.xlsx(Prot_Means, "C:/Users/mnale/OneDrive - University of North Carolina at Chapel Hill/WSP Prot Analysis 2/output/Prot_Means_09.27.2024.xlsx")
```
